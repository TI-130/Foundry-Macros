/// checks for number of targets and sets the array command
var myStringArray = Array.from(game.user.targets)[0];
var arrayLength = game.user.targets.size;
for (var i = 0; i < arrayLength; i++) {
console.log(myStringArray[i]);

/// returns an error message if the caster token is not selected
if(canvas.tokens.controlled.length == 0) return ui.notifications.error("Please select your token");

/// These lines pull the X Y coordinates for the selected token and caster token
let mainTarget = Array.from(game.user.targets)[i];
let myToken = canvas.tokens.controlled [0];
let halfGrid = canvas.scene.data.grid/2;
let srcX = (myToken.data.x + (myToken.data.width*halfGrid));
let srcY = (myToken.data.y + (myToken.data.height*halfGrid));
let tarX = (mainTarget.data.x + (mainTarget.data.width*halfGrid));
let tarY = (mainTarget.data.y + (mainTarget.data.height*halfGrid));
let outerRad = Math.sqrt(Math.pow(mainTarget.data.width*halfGrid,2) + Math.pow(myToken.data.width*halfGrid,2));

/// calculating the angle and distance to target in pixels. This is unique to the current scene
let anDeg = -(Math.atan(((srcY - tarY)/(srcX - tarX)))*57.3);
let anDist = Math.sqrt(Math.pow(srcX-tarX,2)+Math.pow(srcY-tarY,2));
async function wait(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}

/// settinng the animation file to play. Base file can be any, because the file will be switched based on the distance to target
let anFile = "modules/JB2A_DnD5e/Library/2nd_Level/Scorching_Ray_INSTANTANEOUS/Scorching_Ray_Orange_30ft_1200x200.webm";
let anFileSize = 600;
/// evaluates the distance to the target and choose the best length animation file to play
switch(true){
 case (anDist<=1200):
    /// anFileSize should always match the length of the animation file, otherwise it will not land on target. For example, 1200 for 1200x200, and 3600 for 3600x200. If the file was 600x200, anFileSize would be 600
    anFileSize = 1200;
    anFile = "modules/JB2A_DnD5e/Library/2nd_Level/Scorching_Ray_INSTANTANEOUS/Scorching_Ray_Orange_30ft_1200x200.webm";
    break;
 case (anDist>3600):
    anFileSize = 3600;
    anFile = "modules/JB2A_DnD5e/Library/2nd_Level/Scorching_Ray_INSTANTANEOUS/Scorching_Ray_Orange_90ft_3600x200.webm";
    break;
 default:
    anFileSize = 2400;
    anFile = "modules/JB2A_DnD5e/Library/2nd_Level/Scorching_Ray_INSTANTANEOUS/Scorching_Ray_Orange_60ft_2400x200.webm";
    break;
}

/// Sets the scaling parameters for the video file. This will stretch or shrink the file on the x and y axis depending on the distance to target
let anScale = Math.sqrt(Math.pow(srcX-tarX,2)+Math.pow(srcY-tarY,2))/anFileSize;
let anScaleY = anScale;
if (anDist<=600){anScaleY = 0.8}
if (anDist>=800){anScaleY = anScale}

/// corrects the angle against any variation
if(srcX>tarX){anDeg = anDeg+180}
if(srcX==tarX){if(srcY>tarY){anDeg=90}else{anDeg=-90}}

/// Sets the originating position of the animation file and anchors it off center. Also applies the angle and scale that was determined above
let spellAnim = 
                    {
                     file: anFile,
                      position: {
                        x: srcX,
                        y: srcY
                      },
                      anchor: {
                       x: 0,
                       y: 0.5
                      },
                      angle: anDeg,
                      scale: {
                       x: anScale,
                       y: anScaleY
                      }
                    }; 

/// Tells FXMaster to play the spell animation
canvas.fxmaster.playVideo(spellAnim);
game.socket.emit('module.fxmaster', spellAnim);
/// delays 20ms between targets if multiple were selected
await wait (20);
}
